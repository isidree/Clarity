<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>