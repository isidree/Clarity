<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>